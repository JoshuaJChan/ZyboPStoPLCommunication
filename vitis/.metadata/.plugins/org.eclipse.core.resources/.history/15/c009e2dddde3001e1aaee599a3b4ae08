/******************************************************************************
* Copyright (C) 2023 Advanced Micro Devices, Inc. All Rights Reserved.
* SPDX-License-Identifier: MIT
******************************************************************************/
/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xuartps.h"

#ifndef SDT
#define UART_DEVICE_ID          XPAR_XUARTPS_0_DEVICE_ID
#else
#define	XUARTPS_BASEADDRESS		XPAR_XUARTPS_0_BASEADDR
#endif

#ifndef SDT
int UartPsHelloWorldExample(u16 DeviceId);
#else
int UartPsHelloWorldExample(UINTPTR BaseAddress);
#endif

int main()
{
//	int test;
//    init_platform();
//    xil_printf("Hello World\n\r");
//    print("Hello World\n\r");
//    print("Successfully ran Hello World application");
//    scanf("%d\n",&test);
//    print("%d",test);
//    cleanup_platform();
//    return 0;
	int Status;

		/*
		 * Run the Hello World example , specify the the Device ID that is
		 * generated in xparameters.h
		 */
	#ifndef SDT
		Status = UartPsHelloWorldExample(UART_DEVICE_ID);
	#else
		Status = UartPsHelloWorldExample(XUARTPS_BASEADDRESS);
	#endif
		if (Status == XST_FAILURE) {
			xil_printf("Uartps hello world Example Failed\r\n");
			return XST_FAILURE;
		}

		xil_printf("Successfully ran Uartps hello world Example\r\n");

	return Status;
}

#ifndef SDT
int UartPsHelloWorldExample(u16 DeviceId)
#else
int UartPsHelloWorldExample(UINTPTR BaseAddress)
#endif
{
	u8 HelloWorld[] = "Hello World";
	int SentCount = 0;
	int Status;
	XUartPs_Config *Config;

	/*
	 * Initialize the UART driver so that it's ready to use
	 * Look up the configuration in the config table and then initialize it.
	 */
#ifndef SDT
	Config = XUartPs_LookupConfig(DeviceId);
#else
	Config = XUartPs_LookupConfig(BaseAddress);
#endif
	if (NULL == Config) {
		return XST_FAILURE;
	}

	Status = XUartPs_CfgInitialize(&Uart_Ps, Config, Config->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	XUartPs_SetBaudRate(&Uart_Ps, 115200);

	while (SentCount < (sizeof(HelloWorld) - 1)) {
		/* Transmit the data */
		SentCount += XUartPs_Send(&Uart_Ps,
					   &HelloWorld[SentCount], 1);
	}

	return SentCount;
}
